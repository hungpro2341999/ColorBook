using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using UnityEditor;
using UnityEditorInternal;
using UnityEngine;

public class BuildFontEditor : EditorWindow
{
    public Texture Texture;
    public string Characters;
    public int OffsetY;
    public int Tracking = 1;

    [MenuItem("Tool/BuildFontEditor")]
    public static void Init()
    {
        GetWindow<BuildFontEditor>().Show();
    }

    private void OnGUI()
    {
        Texture =
            EditorGUILayout.ObjectField(Texture, typeof(Texture), GUILayout.Width(80), GUILayout.Height(80)) as Texture;
        Characters = EditorGUILayout.TextArea(Characters, GUILayout.Width(300), GUILayout.Height(100));
        GUILayout.BeginHorizontal();
        GUILayout.Label("OffsetY:");
        OffsetY = EditorGUILayout.IntField(OffsetY);
        GUILayout.EndHorizontal();
        GUILayout.BeginHorizontal();
//        GUILayout.Label("Tracking:");
//        Tracking = EditorGUILayout.IntField(Tracking);
        GUILayout.EndHorizontal();
        if (GUILayout.Button("Build"))
            Build();
    }

    private void Build()
    {
        var texturePath = AssetDatabase.GetAssetPath(Texture);
        var rootPath = Path.GetDirectoryName(texturePath);
        var fontPath = string.Format("{0}/{1}.fontsettings", rootPath, Texture.name);
        var objs = AssetDatabase.LoadAllAssetsAtPath(texturePath).ToList();
        objs.RemoveAt(0);
        Sprite[] sprites = objs.Cast<Sprite>().ToArray();

        string text = GetFntFormat(Characters, sprites);
        FntParse parse = FntParse.GetFntParse(ref text);
        if (parse == null) return;
        Texture2D[] textures = DoImportTextures(parse, rootPath, text);
        Font font = AssetDatabase.LoadMainAssetAtPath(fontPath) as Font;
        if (font == null)
        {
            font = new Font();
            AssetDatabase.CreateAsset(font, fontPath);
            AssetDatabase.WriteImportSettingsIfDirty(fontPath);
            AssetDatabase.ImportAsset(fontPath);
        }
        Material material = AssetDatabase.LoadAssetAtPath(fontPath, typeof(Material)) as Material;
        if (material == null)
        {
            material = new Material(Shader.Find("UI/Default"));
            material.name = "Font Material";
            AssetDatabase.AddObjectToAsset(material, fontPath);
            AssetDatabase.ImportAsset(fontPath);
        }
        font.material = material;
        material.shader = Shader.Find(textures.Length > 1 ? "BFI/Font" + textures.Length : "UI/Default");
        material.mainTexture = textures[0];
        for (int i = 1; i < textures.Length; i++)
            material.SetTexture("_MainTex" + (i + 1), textures[i]);
        font.characterInfo = parse.charInfos;
        SerializedObject so = new SerializedObject(font);
        so.Update();
        so.FindProperty("m_FontSize").floatValue = Mathf.Abs(parse.fontSize);
        so.FindProperty("m_LineSpacing").floatValue = parse.lineHeight;
        so.FindProperty("m_Ascent").floatValue = parse.lineBaseHeight;
        SerializedProperty prop = so.FindProperty("m_Descent");
        if (prop != null)
            prop.floatValue = parse.lineBaseHeight - parse.lineHeight;
        UpdateKernings(so, parse.kernings);
        so.ApplyModifiedProperties();
        so.SetIsDifferentCacheDirty();
        AssetDatabase.SaveAssets();
    }

    private static Texture2D[] DoImportTextures(FntParse parse, string rootPath, string fnt)
    {
        int len = parse.textureNames.Length;
        Texture2D[] textures = new Texture2D[len];
        for (int i = 0; i < len; i++)
        {
            // The texture name of the file generated by ShoeBox uses an absolute path
            string textureName = Path.GetFileName(parse.textureNames[i]);
            string texPath = string.Format("{0}/{1}", rootPath, textureName);

            Texture2D texture = AssetDatabase.LoadMainAssetAtPath(texPath) as Texture2D;
            if (texture == null)
                return textures;
            TextureImporter texImporter = AssetImporter.GetAtPath(texPath) as TextureImporter;
            texImporter.textureType = TextureImporterType.Sprite;
            texImporter.spriteImportMode = SpriteImportMode.Multiple;
            texImporter.mipmapEnabled = false;
            texImporter.SaveAndReimport();
            textures[i] = texture;
        }

        return textures;
    }

    private static void UpdateKernings(SerializedObject so, Kerning[] kernings)
    {
        int len = kernings != null ? kernings.Length : 0;
        SerializedProperty kerningsProp = so.FindProperty("m_KerningValues");

        if (len == 0)
        {
            kerningsProp.ClearArray();
            return;
        }

        int propLen = kerningsProp.arraySize;
        for (int i = 0; i < len; i++)
        {
            if (propLen <= i)
                kerningsProp.InsertArrayElementAtIndex(i);
            SerializedProperty kerningProp = kerningsProp.GetArrayElementAtIndex(i);
            kerningProp.FindPropertyRelative("second").floatValue = kernings[i].amount;
            SerializedProperty pairProp = kerningProp.FindPropertyRelative("first");
            pairProp.Next(true);
            pairProp.intValue = kernings[i].first;
            pairProp.Next(false);
            pairProp.intValue = kernings[i].second;
        }

        for (int i = propLen - 1; i >= len; i--)
            kerningsProp.DeleteArrayElementAtIndex(i);
    }

    private static void DelBitmapFont(string fntPath)
    {
        if (!IsFnt(fntPath)) return;

        string fontPath = fntPath.Substring(0, fntPath.Length - 4) + ".fontsettings";
        AssetDatabase.DeleteAsset(fontPath);
    }

    private static void MoveBitmapFont(string oldFntPath, string nowFntPath)
    {
        if (!IsFnt(nowFntPath)) return;

        string oldFontPath = oldFntPath.Substring(0, oldFntPath.Length - 4) + ".fontsettings";
        string nowFontPath = nowFntPath.Substring(0, nowFntPath.Length - 4) + ".fontsettings";
        AssetDatabase.MoveAsset(oldFontPath, nowFontPath);
    }

    // new font can not display via Text in unity 5.5
    // must import import it
    private static void ReloadFont(string fontPath)
    {
        var tmpPath = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());
        AssetDatabase.ExportPackage(fontPath, tmpPath);
        AssetDatabase.DeleteAsset(fontPath);

        var startTime = DateTime.Now;
        EditorApplication.CallbackFunction func = null;
        func = () =>
        {
            TimeSpan dalt = DateTime.Now - startTime;
            if (dalt.TotalSeconds >= 0.1)
            {
                EditorApplication.update -= func;
                AssetDatabase.ImportPackage(tmpPath, false);
                File.Delete(tmpPath);
            }
        };

        EditorApplication.update += func;
    }

    public static bool IsFnt(string path)
    {
        return path.EndsWith(".fnt", StringComparison.OrdinalIgnoreCase);
    }

    public string GetFntFormat(string charators, Sprite[] sprites)
    {
        string starString =
            @"info face='{2}' size=32 bold=0 italic=0 charset='' unicode=0 stretchH=100 smooth=1 aa=1 padding=0,0,0,0 spacing=1,1
common lineHeight=80 base=26 scaleW={4} scaleH={5} pages=1 packed=0 alphaChnl=1 redChnl=0 greenChnl=0 blueChnl=0
page id=0 file='{3}'
chars count={0}
{1}
char id=32 x=0 y=0 width=0 height=0 xoffset=0 yoffset=0 xadvance=20 page=0 chnl=0 letter=' '
char id=9 x=0 y=0 width=0 height=0 xoffset=0 yoffset=0 xadvance=160 page=0 chnl=0 letter='	'
kernings count=0
";
        string rowstring = string.Empty;
        for (int i = 0; i < sprites.Length; i++)
        {
            var s = sprites[i];
            rowstring += GetRow((int) charators[i], (int) s.rect.position.x,
                (int) (s.texture.height - s.rect.y - s.rect.height),
                (int) s.rect.width,
                (int) s.rect.height, 0, -(int) s.rect.height / 2 + OffsetY, (int) s.rect.width + 10);
        }

        string ext = ".psd";
        if (AssetDatabase.GetAssetPath(sprites[0]).Contains(".png"))
        {
            ext = ".png";
        }

        string texture = Texture.name + ext;
        string result = string.Format(starString, sprites.Length + 2, rowstring, Texture.name, texture, Texture.width,
            Texture.height);
        result = result.Replace("\'", "\"");
            Debug.Log(result);
        return result;
    }

    private string GetRow(int id, int x, int y, int width, int height, int xOffset, int yOffset, int xadvance)
    {
        string s =
            string.Format(
                "char id={0} x={1} y={2} width={3} height={4} xoffset={5} yoffset={6} xadvance={7} page={8} chnl={9} letter='{10}'" +
                "\n",
                id, x, y, width, height, xOffset, yOffset, xadvance, 0, 0, (char) id);
        return s;
    }
}